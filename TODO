☐ Life cycles
☐ TP @Input(), TP Observable (référence à Git et Github pour l'exemple)

☐ Page list client
  ☐ test avec template container et un title en anglais list clients
  ☐ le meme test avec template full width et title en anglais
  ☐ le meme bouton avec le meme event et la meme fn que dans page list orders

☐ page list client (récupérer la collection clients)
  ☐ créer un enum (ACTIVE , INACTIVE) state-client
  ☐ créer une interface client-i
  ☐ créer le model (ng g class client)
    ☐ default value state = ACTIVE (en utilisant l'enum)
    ☐ default value tva = 20
    ☐ default value totalCaHT = 0
  ☐ créer le service clients
    ☐ prendre ex sur OrdersService appel http (.../clients)
  ☐ pagelistclientscomponent.ts récupérer la flux de donné retourné par l'appel http présent sur votre service
    ☐ injecter votre service clients dans le constructor
    ☐ créer un variable de type Client[]
    ☐ initialiser votre variable dans le subscribe() de this.clientsService.collection

  ✔ directive d'attr pour ouvrir et fermer le menu dans uicomponent (30mn) @done(21-03-25 09:54)
  ✔ directive de structure ngFor pour le tableau (1h) @done(21-03-25 16:55)
  ✔ directive perso (1h) @done(21-03-25 16:55)
  ✔ pipes angular et pipe perso (1h) @done(21-03-25 16:55)
  ✔ 12h25 pause dej @done(21-03-25 16:55)
  ☐ formulaire et la validation de formulaire (2h)
  ☐ generate doc
  ☐ webpack bundle analyzer

  ☐ tp sur les observables (subjects, behaviorSubject, Observable)
    ☐ tp edit
    ☐ tp delete
    ☐ tp detail routes enfant
