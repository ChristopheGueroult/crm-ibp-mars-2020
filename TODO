☐ Life cycles
☐ TP @Input(), TP Observable (référence à Git et Github pour l'exemple)

☐ Page list client
  ☐ test avec template container et un title en anglais list clients
  ☐ le meme test avec template full width et title en anglais
  ☐ le meme bouton avec le meme event et la meme fn que dans page list orders

☐ page list client (récupérer la collection clients)
  ☐ créer un enum (ACTIVE , INACTIVE) state-client
  ☐ créer une interface client-i
  ☐ créer le model (ng g class client)
    ☐ default value state = ACTIVE (en utilisant l'enum)
    ☐ default value tva = 20
    ☐ default value totalCaHT = 0
  ☐ créer le service clients
    ☐ prendre ex sur OrdersService appel http (.../clients)
  ☐ pagelistclientscomponent.ts récupérer la flux de donné retourné par l'appel http présent sur votre service
    ☐ injecter votre service clients dans le constructor
    ☐ créer un variable de type Client[]
    ☐ initialiser votre variable dans le subscribe() de this.clientsService.collection

  ✔ directive d'attr pour ouvrir et fermer le menu dans uicomponent (30mn) @done(21-03-25 09:54)
  ✔ directive de structure ngFor pour le tableau (1h) @done(21-03-25 16:55)
  ✔ directive perso (1h) @done(21-03-25 16:55)
  ✔ pipes angular et pipe perso (1h) @done(21-03-25 16:55)
  ✔ 12h25 pause dej @done(21-03-25 16:55)
  ☐ formulaire et la validation de formulaire (2h)
  ☐ tp form enregistement temp form befor submit
  ☐ generate doc
  ☐ webpack bundle analyzer

  ☐ tp sur les observables (subjects, behaviorSubject, Observable)

    ☐ tp edit order

    ✔ page-list-orders.component.html @done(21-03-26 14:47)
        ✔ ajoute un td au debut d'un tr et on met un icon-edit dedans @done(21-03-26 14:47)
        ✔ (click)="goToEdit(item.id)" @done(21-03-26 14:47)
      ✔ page-list-orders.component.ts @done(21-03-26 14:47)
        ✔ Ajouter "Actions" en entête @done(21-03-26 14:47)
        ✔ Déclarer fa fn goToEdit(id: number):void et rediriger vers la route orders/edit/3 @done(21-03-26 14:47)
        this.router.navigate(['orders', 'edit', id])
      ✔ orders-routing.module.ts @done(21-03-26 14:47)
        ✔ modifier la route edit pour qu'elle autorise un paramètre id après le edit/ @done(21-03-26 14:47)

      on arrive sur la route orders/edit/3
      ☐ page-edit-order-component.ts
        ☐ Récupérer l'id dans la route (ActivatedRoute)
        ☐ this.ordersService.getItemById(id).subscribe(....flux etant votre item)
        ☐ dans le subscribe() on recupère le flux et on initialise une propriété item: Order ou  (item$ : Observable<Order>);
      ☐ orders.service.ts
        ☐ Déclare la fn getItemById(id: number): Observable<Order>
      ☐ page-edit-order.component.html
        ☐ On utilise template-container component
        ☐ On utilise form-order component : Binder l'@Input() init avec la propriété item (attention à la valeur d'item)
        ☐ Pour l'@Output() (submited)="edit($event)"
      ☐ page-edit-order.component.ts
        ☐ Déclarer la fn edit(item: Order) {utliser this.ordersService.update(item).subscribe(ici res de l'api)}
        ☐ Dans le subscribe, rediriger l'utilisateur vers la route orders

    ☐ tp delete

